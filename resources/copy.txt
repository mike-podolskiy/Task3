	В регулярном выражении для более удобной обработки входной последовательности применяются группы, которые помогают выделить части найденной подпоследовательности. 
	В шаблоне они обозначаются скобками "(" и ")". 
	Номера групп начинаются с единицы. Нулевая группа совпадает со всей найден-ной подпоследовательностью. 
	Далее приведены методы для извлечения информа-ции о группах.
	int end() - возвращает индекс последнего символа подпоследовательности, удовлетворяющей шаблону;
	int end(int group) - возвращает индекс последнего символа указанной группы;
	String group() - возвращает всю подпоследовательность, удовлетворя-ющую шаблону;
	String group(int group) - возвращает конкретную группу;
	int groupCount() - возвращает количество групп;
	int start() - возвращает индекс первого символа подпоследовательно-сти, удовлетворяющей шаблону;
	int start(int group) - возвращает индекс первого символа указанной группы;
	boolean hitEnd() - возвращает истину, если был достигнут конец вход-ной последовательности.
	public class Groups {
	public static void main(String[] args){
	String input = "abdcxyz";
	myMatches("([a-z]*)([a-z]+)", input);
	myMatches("([a-z]?)([a-z]+)", input);
	myMatches("([a-z]+)([a-z]*)", input);
	myMatches("([a-z]?)([a-z]?)", input);
	}
	public static void myMatches(String regex,	String input){
	Pattern pattern = Pattern.compile(regex);
	Matcher matcher = pattern.matcher(input);
	if(matcher.matches()) {
	System.out.println("First group: "+ matcher.group(1));
	System.out.println("Second group: "+ matcher.group(2));
	}  
	else {
	System.out.println("nothing");
	}
	System.out.println(); 
	} 
	}
//#
Результат работы программы: 
First group: abdcxy Second group: z
First group: a Second group: bdcxyz
First group: abdcxyz Second group:
nothing
//#~